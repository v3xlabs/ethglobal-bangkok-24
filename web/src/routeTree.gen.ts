/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ListIndexLazyImport = createFileRoute('/list/')()
const ListAllLazyImport = createFileRoute('/list/all')()
const ActionNewLazyImport = createFileRoute('/action/new')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ListIndexLazyRoute = ListIndexLazyImport.update({
  id: '/list/',
  path: '/list/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/list/index.lazy').then((d) => d.Route))

const ListAllLazyRoute = ListAllLazyImport.update({
  id: '/list/all',
  path: '/list/all',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/list/all.lazy').then((d) => d.Route))

const ActionNewLazyRoute = ActionNewLazyImport.update({
  id: '/action/new',
  path: '/action/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/action/new.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/action/new': {
      id: '/action/new'
      path: '/action/new'
      fullPath: '/action/new'
      preLoaderRoute: typeof ActionNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/list/all': {
      id: '/list/all'
      path: '/list/all'
      fullPath: '/list/all'
      preLoaderRoute: typeof ListAllLazyImport
      parentRoute: typeof rootRoute
    }
    '/list/': {
      id: '/list/'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/action/new': typeof ActionNewLazyRoute
  '/list/all': typeof ListAllLazyRoute
  '/list': typeof ListIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/action/new': typeof ActionNewLazyRoute
  '/list/all': typeof ListAllLazyRoute
  '/list': typeof ListIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/action/new': typeof ActionNewLazyRoute
  '/list/all': typeof ListAllLazyRoute
  '/list/': typeof ListIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/action/new' | '/list/all' | '/list'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/action/new' | '/list/all' | '/list'
  id: '__root__' | '/' | '/action/new' | '/list/all' | '/list/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ActionNewLazyRoute: typeof ActionNewLazyRoute
  ListAllLazyRoute: typeof ListAllLazyRoute
  ListIndexLazyRoute: typeof ListIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ActionNewLazyRoute: ActionNewLazyRoute,
  ListAllLazyRoute: ListAllLazyRoute,
  ListIndexLazyRoute: ListIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/action/new",
        "/list/all",
        "/list/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/action/new": {
      "filePath": "action/new.lazy.tsx"
    },
    "/list/all": {
      "filePath": "list/all.lazy.tsx"
    },
    "/list/": {
      "filePath": "list/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
